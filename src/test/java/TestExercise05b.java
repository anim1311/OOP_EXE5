/**
 * DO NOT EDIT THIS FILE 
 * author: Ronny Hartanto (2022)
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.GregorianCalendar;

public class TestExercise05b {

   @Test
   public void test01()
   {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Triangle tri1 = new Triangle(5, 5, 5);
    Triangle tri2 = new Triangle(3, 5, 4);
    GeometricObject geo = tri2;
    assertFalse(tri2.isFilled());
    assertEquals(tri2.getX(), 0);
    assertEquals(tri2.getY(), 0);
    assertEquals("white", tri2.getColor());
    tri2.setColor("blue");
    assertEquals(3.0, tri2.getSide1());
    assertEquals(4, tri2.getSide3());
    assertEquals(5, tri1.getSide2());
    assertEquals(15.0, tri1.getPerimeter(), 0.0001);
    assertEquals(12.0, geo.getPerimeter(), 0.0001);
    assertEquals(10.825317547305483, tri1.getArea(), 0.00000001);
    assertEquals(6.0, geo.getArea(), 0.00000001);
    assertEquals("blue", geo.getColor());
    System.setOut(originalOut);
   }

   @Test
  public void test02()
  {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Triangle tri1 = new Triangle(5, 5, 5, 1, 1, 0);
    Triangle tri2 = new Triangle("green", true, 3, 5, 4, 2, 2, 3.14);
    GeometricObject geo = tri2;
    assertEquals("green", tri2.getColor());
    assertTrue(tri2.isFilled());
    assertEquals(tri2.getX(), 2);
    assertEquals(tri2.getY(), 2);
    assertEquals(tri2.getTheta(), 3.14);
    tri2.setColor("blue");
    assertEquals(3.0, tri2.getSide1());
    assertEquals(4, tri2.getSide3());
    assertEquals(5, tri1.getSide2());
    assertEquals(15.0, tri1.getPerimeter(), 0.0001);
    assertEquals(12.0, geo.getPerimeter(), 0.0001);
    assertEquals(10.825317547305483, tri1.getArea(), 0.00000001);
    assertEquals(6.0, geo.getArea(), 0.00000001);
    assertEquals("blue", geo.getColor());
    System.setOut(originalOut);
  }
  @Test
  public void test03()
  {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Triangle tri1 = new Triangle(5, 5, 5, 1, 1, 0);
    Triangle tri2 = new Triangle("green", true, 3, 5, 4, 2, 2, 3.14);
    GeometricObject geo = tri2;
    assertEquals("green", geo.getColor());
    assertTrue(geo.isFilled());
    assertEquals(geo.getX(), 2);
    assertEquals(geo.getY(), 2);
    assertEquals(geo.getTheta(), 3.14);
    geo.rotate(-3.14);
    assertEquals(geo.getTheta(), 0.0, 0.000000001);
    geo.setColor("blue");
    assertEquals(3.0, tri2.getSide1());
    assertEquals(4, tri2.getSide3());
    assertEquals(5, tri1.getSide2());
    assertEquals(15.0, tri1.getPerimeter(), 0.0001);
    assertEquals(12.0, geo.getPerimeter(), 0.0001);
    assertEquals(10.825317547305483, tri1.getArea(), 0.00000001);
    assertEquals(6.0, geo.getArea(), 0.00000001);
    assertEquals("blue", geo.getColor());
    System.setOut(originalOut);
  }    
  @Test
  public void test04()
  {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Triangle tri1 = new Triangle(1, 1, 1.414, 0, 0, 0.0);
    Triangle tri2 = new Triangle("green", true, 4, 3, 5, 0, 0, 3.14);
    GeometricObject geo = tri2;
    assertEquals("green", geo.getColor());
    assertEquals(geo.getTheta(), 3.14);
    tri2.rotate(-3.14);
    assertEquals(tri2.getTheta(), 0.0, 0.000000001);
    assertEquals(geo.toString(), "(0.00,0.00),(4.00,0.00),(4.00,3.00)");    
    assertEquals(tri1.toString(), "(0.00,0.00),(1.00,0.00),(1.00,1.00)");
    System.setOut(originalOut);
  }    
  @Test
  public void test05()
  {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Triangle tri1 = new Triangle(1, 1, 1.414, 0, 0, 0.0);
    Triangle tri2 = new Triangle("green", true, 4, 3, 5, 0, 0, 0.0);
    GeometricObject geo = tri2;
    tri2.rotate(-Math.PI);
    tri1.rotate(Math.PI);
    assertEquals(tri1.toString(), "(0.00,0.00),(-1.00,0.00),(-1.00,-1.00)");
    assertEquals(geo.toString(), "(0.00,0.00),(-4.00,-0.00),(-4.00,-3.00)");   
  }

}
