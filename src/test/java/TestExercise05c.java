/**
 * DO NOT EDIT THIS FILE 
 * author: Ronny Hartanto (2022)
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;

import java.io.*;

public class TestExercise05c {

   @Test
   public void test01()
   {
      PrintStream originalOut = System.out;
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(bos));
      RegularPolygon pol0 = new RegularPolygon();
      RegularPolygon pol1 = new RegularPolygon(6, 4);
      RegularPolygon pol2 = new RegularPolygon(10, 4, 5.6, 7.8);
      assertEquals(0.0, pol0.getX());
      assertEquals(0.0, pol0.getY());
      assertEquals(1.0, pol0.getSide());
      assertEquals(3, pol0.getN());
      assertEquals(0.0, pol1.getX());
      assertEquals(0.0, pol1.getY());
      assertEquals(4.0, pol1.getSide());
      assertEquals(6, pol1.getN());
      assertEquals(7.8, pol2.getY());
      assertEquals(5.6, pol2.getX());
      assertEquals(4, pol2.getSide());
      assertEquals(10, pol2.getN());
      System.setOut(originalOut);
   }   
   @Test
   public void test02()
   {
      PrintStream originalOut = System.out;
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(bos));
      RegularPolygon pol0 = new RegularPolygon(2, -2);
      RegularPolygon pol1 = new RegularPolygon(2, 4);
      RegularPolygon pol2 = new RegularPolygon(-2, -4, 5.6, 7.8);
      assertEquals(0.0, pol0.getX());
      assertEquals(0.0, pol0.getY());
      assertEquals(1.0, pol0.getSide());
      assertEquals(3, pol0.getN());
      assertEquals(0.0, pol1.getX());
      assertEquals(0.0, pol1.getY());
      assertEquals(4.0, pol1.getSide());
      assertEquals(3, pol1.getN());
      assertEquals(7.8, pol2.getY());
      assertEquals(5.6, pol2.getX());
      assertEquals(1.0, pol2.getSide());
      assertEquals(3, pol2.getN());
      System.setOut(originalOut);
   }
   @Test
   public void test03()
   {
      PrintStream originalOut = System.out;
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(bos));
      RegularPolygon pol1 = new RegularPolygon(6, 4);
      RegularPolygon pol2 = new RegularPolygon("red", true, 10, 4, 5.6, 7.8, 3.14);
      GeometricObject geo = pol2;
      assertEquals(pol1.getColor(), "white");
      assertFalse(pol1.isFilled());
      assertEquals(0.0, pol1.getX());
      assertEquals(7.8, pol2.getY());
      assertTrue(geo.isFilled());
      assertEquals(geo.getColor(), "red");
      assertEquals(geo.getTheta(), 3.14);
      geo.rotate(-3.14);
      assertEquals(geo.getTheta(), 0.00, 0.000000001);
      assertEquals(6, pol1.getN());
      assertEquals(4, pol2.getSide());
      assertEquals(24.0, pol1.getPerimeter(), 0.0001);
      assertEquals(40.0, geo.getPerimeter(), 0.0001);
      assertEquals(41.569219381653056, pol1.getArea(), 0.00000001);
      assertEquals(123.10734148701015, geo.getArea(), 0.00000001);
      System.setOut(originalOut);
   }    
   @Test
   public void test04()
   {
      PrintStream originalOut = System.out;
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(bos));
      RegularPolygon pol1 = new RegularPolygon(5, 4);
      GeometricObject pol2 = new RegularPolygon(10, 4, 5.6, 7.8);
      GeometricObject pol3 = new RegularPolygon(4, 1, -1, -1);
      GeometricObject pol4 = new RegularPolygon(3, 1, 5, -5);
      assertEquals("(0.00,0.00),(4.00,0.00),(5.24,3.80),(2.00,6.16),(-1.24,3.80)", ((GeometricObject)pol1).toString());
      assertEquals("(5.60,7.80),(9.60,7.80),(12.84,10.15),(14.07,13.96),(12.84,17.76),(9.60,20.11),(5.60,20.11),(2.36,17.76),(1.13,13.96),(2.36,10.15)", pol2.toString());
      assertEquals("(-1.00,-1.00),(0.00,-1.00),(0.00,0.00),(-1.00,0.00)", pol3.toString());
      assertEquals("(5.00,-5.00),(6.00,-5.00),(5.50,-4.13)", pol4.toString());
      System.setOut(originalOut);
   }   
   @Test
   public void test05()
   {
      PrintStream originalOut = System.out;
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(bos));
      RegularPolygon pol1 = new RegularPolygon(5, 4);
      GeometricObject pol2 = new RegularPolygon(10, 4, 5.6, 7.8);
      GeometricObject pol3 = new RegularPolygon(4, 1, -1, -1);
      GeometricObject pol4 = new RegularPolygon(3, 1, 5, -5);
      pol1.rotate(Math.PI);
      pol2.rotate(Math.PI/2);
      pol3.rotate(Math.PI/-2);
      pol4.setTheta(Math.PI/3);
      assertEquals("(0.00,0.00),(-4.00,0.00),(-5.24,-3.80),(-2.00,-6.16),(1.24,-3.80)", ((GeometricObject)pol1).toString());
      assertEquals("(5.60,7.80),(5.60,11.80),(3.25,15.04),(-0.56,16.27),(-4.36,15.04),(-6.71,11.80),(-6.71,7.80),(-4.36,4.56),(-0.56,3.33),(3.25,4.56)", pol2.toString());
      assertEquals("(-1.00,-1.00),(-1.00,-2.00),(0.00,-2.00),(0.00,-1.00)", pol3.toString());
      assertEquals("(5.00,-5.00),(5.50,-4.13),(4.50,-4.13)", pol4.toString());
      System.setOut(originalOut);
   }   
}
